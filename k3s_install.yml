- hosts: k3s_all
  gather_facts: true
  remote_user: root
  become: yes
  vars:
    ansible_become_pass: "ubuntu"

  tasks:
  - name: create directory if they don't exist
    file:
      path: "{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0775
    loop:
    - /root/k3s

  - name: Copy K3S image and binary
    copy:
      src: "{{ item.src }}"
      dest: "{{ item. dest }}"
      owner: root
      group: root
      mode: 0775
    with_items:
    - src: /Users/tomasjartymyk/K3s/k8s_dashboard/serviceaccount.yaml
      dest: /root/k3s/serviceaccount.yaml
    - src: /Users/tomasjartymyk/K3s/k8s_dashboard/ingress.yaml
      dest: /root/k3s/dashboard_ingress.yaml
    - src: /Users/tomasjartymyk/K3s/metallb/metallb.yaml
      dest: /root/k3s/metallb.yaml
    - src: /Users/tomasjartymyk/K3s/longhorn/ingress.yaml
      dest: /root/k3s/longhorn_ingress.yaml

- hosts: k3s_1st_master_install
  gather_facts: true
  remote_user: root
  become: yes
  vars:
    ansible_become_pass: "DevOps753 "

  tasks:
  - name: Install first K3S master node
    shell: curl -sfL https://get.k3s.io | sh -s - server --cluster-init --disable servicelb
    args:
      executable: /bin/bash
  - name: get the K3S token value
    shell: cat "/var/lib/rancher/k3s/server/token"
    register: token


- hosts: k3s_master_install
  gather_facts: true
  remote_user: root
  become: yes
  vars:
    ansible_become_pass: "DevOps753 "

  tasks:
  - name: view the token value
    debug: msg="{{ hostvars[item].token.stdout }}"
    with_items: "{{ groups['k3s_1st_master_install'] }}"
  - name: Install  K3S master node
    shell: curl -sfL https://get.k3s.io | K3S_TOKEN={{ hostvars[item].token.stdout }} sh -s - server --server https://{{ hostvars[item].ansible_default_ipv4.address }}:6443 --cluster-init --disable servicelb
    with_items: "{{ groups['k3s_1st_master_install'] }}"
    args:
      executable: /bin/bash

- hosts: k3s_1st_master_install
  gather_facts: true
  remote_user: root
  become: yes
  vars:
    ansible_become_pass: "DevOps753"
  tasks:
  - name: Instalation Metallb (loadbalancer)
    shell: |
      kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.12/config/manifests/metallb-native.yaml --insecure-skip-tls-verify
      sleep 30s
      POD=$(kubectl get pods -l app=metallb -o jsonpath="{.items[0].metadata.name}" -n metallb-system)
      echo $POD
      kubectl wait --for=condition=Ready pod/$POD -n metallb-system
      kubectl apply -f https://raw.githubusercontent.com/jartas/DevOps/main/metallb/metallb.yaml --insecure-skip-tls-verify
    args:
      executable: /bin/bash

  - name: Instalation K8s Dashboard
    shell: |
      kubectl create namespace kubernetes-dashboard
      kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml --insecure-skip-tls-verify
      kubectl apply -f https://raw.githubusercontent.com/jartas/DevOps/main/k8s_dashboard/manifest.yaml --insecure-skip-tls-verify
      kubectl wait --for=condition=complet deployment/traefik -n kube-system
      kubectl -n kube-system patch deployment traefik \
      --type=json \
      -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--serversTransport.insecureSkipVerify=true"}]'
    args:
      executable: /bin/bash

  - name: Token for K8S Dashboard
    shell: kubectl get secret admin-user -n kubernetes-dashboard -o jsonpath={".data.token"} | base64 -d
    register: dashboard_token
  - name: view the token value
    debug: msg="{{ dashboard_token.stdout }}"

  - name: Instalation Longhorn (Persistent volume)
    shell: |
      kubectl create namespace longhorn-system
      kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/v1.5.3/deploy/longhorn.yaml
      kubectl apply -f /root/k3s/longhorn_ingress.yaml
    args:
      executable: /bin/bash

